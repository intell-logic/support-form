name: 🎫 Process Support Tickets

on:
  repository_dispatch:
    types: [ticket_created]

jobs:
  create-clickup-task:
    runs-on: ubuntu-latest
    name: 📝 Create ClickUp Task
    
    steps:
    - name: 🔍 Debug Payload
      run: |
        echo "Event Type: ${{ github.event.action }}"
        echo "Payload Keys: ${{ toJson(github.event.client_payload) }}"
    
    - name: 🎯 Create ClickUp Task
      uses: actions/github-script@v7
      with:
        script: |
          const ticketData = context.payload.client_payload;
          
          console.log('📥 Received ticket data:', JSON.stringify(ticketData, null, 2));
          
          // Mapear prioridad a números de ClickUp
          const priorityMap = {
            'urgente': 1,
            'alta': 2, 
            'media': 3,
            'baja': 4
          };
          
          // Preparar datos para ClickUp
          const clickupTask = {
            name: ticketData.titulo,
            description: `🎫 **Ticket ID:** ${ticketData.id}
            📅 **Fecha:** ${ticketData.fechaLocal || new Date().toLocaleString('es-ES')}
            🏷️ **Tipo:** ${ticketData.etiqueta}
            🚨 **Prioridad:** ${ticketData.prioridad}
            🌐 **Origen:** Formulario Web

            **📝 Descripción del Cliente:**
            ${ticketData.descripcion}

            **🔍 Información Técnica:**
          - User Agent: ${ticketData.cliente?.userAgent || 'N/A'}
          - Plataforma: ${ticketData.cliente?.plataforma || 'N/A'}
          - Idioma: ${ticketData.cliente?.idioma || 'N/A'}
          - URL Origen: ${ticketData.cliente?.url || 'N/A'}
---
*✨ Creado automáticamente vía GitHub Actions*
*⏰ Procesado: ${new Date().toLocaleString('es-ES')}*`,
            
            priority: priorityMap[ticketData.prioridad] || 3,
            status: 'to do',
            tags: [
              'formulario-web',
              ticketData.etiqueta,
              `prioridad-${ticketData.prioridad}`,
              'github-actions'
            ]
          };
          
          console.log('📤 Sending to ClickUp:', JSON.stringify(clickupTask, null, 2));
          
          // Enviar a ClickUp API
          const response = await fetch(`https://api.clickup.com/api/v2/list/${process.env.CLICKUP_LIST_ID}/task`, {
            method: 'POST',
            headers: {
              'Authorization': process.env.CLICKUP_API_TOKEN,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(clickupTask)
          });
          
          if (!response.ok) {
            const errorText = await response.text();
            console.error('❌ ClickUp API Error:', response.status, errorText);
            throw new Error(`ClickUp API Error: ${response.status} - ${errorText}`);
          }
          
          const result = await response.json();
          console.log('✅ ClickUp Task Created:', result.id);
          console.log('🔗 Task URL:', result.url);
          
          // Comentar en el PR/Issue si existe
          if (context.issue?.number) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `✅ **Ticket procesado exitosamente**
              
🎫 **Ticket ID:** ${ticketData.id}
📋 **ClickUp Task ID:** ${result.id}
🔗 **Ver en ClickUp:** ${result.url}
📅 **Procesado:** ${new Date().toLocaleString('es-ES')}`
            });
          }
          
      env:
        CLICKUP_API_TOKEN: ${{ secrets.CLICKUP_API_TOKEN }}
        CLICKUP_LIST_ID: ${{ secrets.CLICKUP_LIST_ID }}
